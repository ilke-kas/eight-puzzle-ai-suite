>>># TEST FOR HEURISTICS
>>>#---------------------------
>>># CASE 1
>>>setSeed 42
>>>scrambleState 2
move right
 1   2
 3 4 5
 6 7 8

move right
 1 2  
 3 4 5
 6 7 8

>>>
>>># get heuristic 1 value
>>>heuristic h1
Heuristic 1 Result (number of misplaced tiles): 2
>>>
>>># get heuristic 2 value
>>>heuristic h2
Heuristic 2 Result (sum of the distances from their goal positions): 2
>>>
>>># get heuristic 3 value which is not exist since it should show error
>>>heuristic h3
Error: Invalid Heuristic
>>># ----------------------
>>># CASE 2
>>># Very basic case that if the given state is the goal state already show the output
>>># set seed of random generator first then scramble state
>>>setSeed 56
>>>scrambleState 4
move right
 1   2
 3 4 5
 6 7 8

move right
 1 2  
 3 4 5
 6 7 8

move left
 1   2
 3 4 5
 6 7 8

move left
   1 2
 3 4 5
 6 7 8

>>>
>>># get heuristic 1 value
>>>heuristic h1
Heuristic 1 Result (number of misplaced tiles): 0
>>>
>>># get heuristic 2 value
>>>heuristic h2
Heuristic 2 Result (sum of the distances from their goal positions): 0
>>># ----------------------
>>># CASE 3
>>># Scramble State Too Much 
>>>setSeed 56
>>>scrambleState 20
move right
 1   2
 3 4 5
 6 7 8

move right
 1 2  
 3 4 5
 6 7 8

move left
 1   2
 3 4 5
 6 7 8

move left
   1 2
 3 4 5
 6 7 8

move right
 1   2
 3 4 5
 6 7 8

move left
   1 2
 3 4 5
 6 7 8

move right
 1   2
 3 4 5
 6 7 8

move down
 1 4 2
 3   5
 6 7 8

move left
 1 4 2
   3 5
 6 7 8

move down
 1 4 2
 6 3 5
   7 8

move right
 1 4 2
 6 3 5
 7   8

move left
 1 4 2
 6 3 5
   7 8

move right
 1 4 2
 6 3 5
 7   8

move left
 1 4 2
 6 3 5
   7 8

move right
 1 4 2
 6 3 5
 7   8

move up
 1 4 2
 6   5
 7 3 8

move down
 1 4 2
 6 3 5
 7   8

move up
 1 4 2
 6   5
 7 3 8

move left
 1 4 2
   6 5
 7 3 8

move up
   4 2
 1 6 5
 7 3 8

>>>
>>># get heuristic 1 value
>>>heuristic h1
Heuristic 1 Result (number of misplaced tiles): 5
>>>
>>># get heuristic 2 value
>>>heuristic h2
Heuristic 2 Result (sum of the distances from their goal positions): 8
>>>#---------------------------
>>># TESTS FOR A*
>>>#---------------------------
>>># CASE 1
>>>setSeed 56
>>>scrambleState 4
move right
 1   2
 3 4 5
 6 7 8

move right
 1 2  
 3 4 5
 6 7 8

move left
 1   2
 3 4 5
 6 7 8

move left
   1 2
 3 4 5
 6 7 8

>>>printState
   1 2
 3 4 5
 6 7 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1
Nodes created during search: 1
Solution length: 0
Move sequence: 
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2
Nodes created during search: 1
Solution length: 0
Move sequence: 
>>>#---------------------------
>>># CASE 2
>>>setSeed 42
>>>scrambleState 2
move right
 1   2
 3 4 5
 6 7 8

move right
 1 2  
 3 4 5
 6 7 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1
Nodes created during search: 5
Solution length: 2
Move sequence: 
move left
move left
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2
Nodes created during search: 5
Solution length: 2
Move sequence: 
move left
move left
>>>#---------------------------
>>># CASE 3
>>>setSeed 909
>>>scrambleState 8
move down
 3 1 2
   4 5
 6 7 8

move right
 3 1 2
 4   5
 6 7 8

move left
 3 1 2
   4 5
 6 7 8

move right
 3 1 2
 4   5
 6 7 8

move down
 3 1 2
 4 7 5
 6   8

move up
 3 1 2
 4   5
 6 7 8

move down
 3 1 2
 4 7 5
 6   8

move left
 3 1 2
 4 7 5
   6 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1
Nodes created during search: 10
Solution length: 4
Move sequence: 
move right
move up
move left
move up
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2
Nodes created during search: 10
Solution length: 4
Move sequence: 
move right
move up
move left
move up
>>>#---------------------------
>>># TEST CASE 4 (Maximally Scrambled)
>>>setState 8 7 6 5 4 3 2 1 0
>>>printState
 8 7 6
 5 4 3
 2 1  

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
Error maxnodes limit (1000) reached
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
Error maxnodes limit (1000) reached
>>>#---------------------------
>>># TEST CASE 5(Maximally Scrambled increased max_node example), h2 can solve it while h1 cant, 
>>># duplicated states  are detected during repeated state checking
>>>setState 8 7 6 5 4 3 2 1 0
>>>printState
 8 7 6
 5 4 3
 2 1  

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1 maxnodes=2000
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
Error maxnodes limit (2000) reached
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2 maxnodes=2000
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
Nodes created during search: 1090
Solution length: 28
Move sequence: 
move up
move up
move left
move left
move down
move down
move right
move right
move up
move up
move left
move left
move down
move down
move right
move right
move up
move up
move left
move left
move down
move down
move right
move right
move up
move up
move left
move left
>>>#---------------------------
>>># TEST CASE 6
>>>setState 0 1 2 3 4 5 6 7 8
>>>printState
   1 2
 3 4 5
 6 7 8

>>>
>>>move down
>>>printState
 3 1 2
   4 5
 6 7 8

>>>
>>>move right
>>>printState
 3 1 2
 4   5
 6 7 8

>>>
>>>move up
>>>printState
 3   2
 4 1 5
 6 7 8

>>>
>>>move left
>>>printState
   3 2
 4 1 5
 6 7 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1 
Nodes created during search: 12
Solution length: 4
Move sequence: 
move right
move down
move left
move up
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2 
Nodes created during search: 10
Solution length: 4
Move sequence: 
move right
move down
move left
move up
>>>#---------------------------
>>># TEST CASE 7
>>>setState 0 1 2 3 4 5 6 7 8
>>>printState
   1 2
 3 4 5
 6 7 8

>>>
>>>move right
>>>printState
 1   2
 3 4 5
 6 7 8

>>>
>>>move down
>>>printState
 1 4 2
 3   5
 6 7 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1 
Nodes created during search: 7
Solution length: 2
Move sequence: 
move up
move left
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2 
Nodes created during search: 7
Solution length: 2
Move sequence: 
move up
move left
>>>#---------------------------
>>># TEST CASE 8
>>>setState 0 1 2 3 4 5 6 7 8
>>>printState
   1 2
 3 4 5
 6 7 8

>>>
>>>move down
>>>printState
 3 1 2
   4 5
 6 7 8

>>>
>>>move down
>>>printState
 3 1 2
 6 4 5
   7 8

>>>
>>>move right
>>>printState
 3 1 2
 6 4 5
 7   8

>>>
>>>move up
>>>printState
 3 1 2
 6   5
 7 4 8

>>>
>>>move up
>>>printState
 3   2
 6 1 5
 7 4 8

>>>
>>>move left
>>>printState
   3 2
 6 1 5
 7 4 8

>>>
>>>
>>># solve for A* with heuristic 1
>>>solve A* h1 
Nodes created during search: 15
Solution length: 6
Move sequence: 
move right
move down
move down
move left
move up
move up
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2 
Nodes created during search: 13
Solution length: 6
Move sequence: 
move right
move down
move down
move left
move up
move up
>>>
>>>#---------------------------
>>># TEST CASE 9
>>>setState 2 3 1 4 0 5 6 7 8
>>>printState
 2 3 1
 4   5
 6 7 8

>>>
>>># solve for A* with heuristic 1
>>>solve A* h1 maxnodes=1000
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
During repeated state check duplicated states are detected
Nodes created during search: 558
Solution length: 14
Move sequence: 
move left
move up
move right
move right
move down
move left
move left
move up
move right
move down
move right
move up
move left
move left
>>>
>>># solve for A* with heuristic 2
>>>solve A* h2 maxnodes=1000
During repeated state check duplicated states are detected
Nodes created during search: 226
Solution length: 14
Move sequence: 
move left
move up
move right
move right
move down
move left
move left
move up
move right
move down
move right
move up
move left
move left
>>>
>>>
